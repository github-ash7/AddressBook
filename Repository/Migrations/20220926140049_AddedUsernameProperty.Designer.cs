// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repository;

#nullable disable

namespace Repository.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20220926140049_AddedUsernameProperty")]
    partial class AddedUsernameProperty
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Entities.Models.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("City")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Line1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Line2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RefTermId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("StateName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("ZipCode")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RefTermId");

                    b.HasIndex("UserId");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Entities.Models.Email", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RefTermId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RefTermId");

                    b.HasIndex("UserId");

                    b.ToTable("Email");
                });

            modelBuilder.Entity("Entities.Models.Phone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("PhoneNumber")
                        .HasColumnType("bigint");

                    b.Property<Guid>("RefTermId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RefTermId");

                    b.HasIndex("UserId");

                    b.ToTable("Phone");
                });

            modelBuilder.Entity("Entities.Models.RefSet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RefSet");

                    b.HasData(
                        new
                        {
                            Id = new Guid("96388fb1-74c2-4915-88d0-c1a2d9b8600d"),
                            Key = "ADDRESS_TYPE"
                        },
                        new
                        {
                            Id = new Guid("a929dfdc-207b-4578-85e9-20edf77e353f"),
                            Key = "PHONE_NUMBER_TYPE"
                        },
                        new
                        {
                            Id = new Guid("f3adda1e-ee6b-41f8-9b26-d23d135b6893"),
                            Key = "EMAIL_ADDRESS_TYPE"
                        });
                });

            modelBuilder.Entity("Entities.Models.RefTerm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RefTerm");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ad0cfe12-3b16-47ae-b9e2-c534bc57686d"),
                            Description = "RefTerm key for EMAIL_ADDRESS_TYPE, ADDRESS_TYPE and PHONE_NUMBER_TYPE",
                            Key = "PERSONAL"
                        },
                        new
                        {
                            Id = new Guid("1bb955a3-5fef-428a-a763-97eadb9e46ac"),
                            Description = "RefTerm key for EMAIL_ADDRESS_TYPE, ADDRESS_TYPE and PHONE_NUMBER_TYPE",
                            Key = "WORK"
                        },
                        new
                        {
                            Id = new Guid("aabe0ac9-35e4-45af-ab6f-48bcbe16eba1"),
                            Description = "RefTerm key for PHONE_NUMBER_TYPE",
                            Key = "ALTERNATE"
                        });
                });

            modelBuilder.Entity("Entities.Models.SetRefTerm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RefSetId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RefTermId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RefSetId");

                    b.HasIndex("RefTermId");

                    b.ToTable("SetRefTerm");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c92f9237-d91b-4f00-9c79-4e3a9c3bdb26"),
                            RefSetId = new Guid("96388fb1-74c2-4915-88d0-c1a2d9b8600d"),
                            RefTermId = new Guid("ad0cfe12-3b16-47ae-b9e2-c534bc57686d")
                        },
                        new
                        {
                            Id = new Guid("163a753c-4ba3-4ef3-9e93-09071c715389"),
                            RefSetId = new Guid("96388fb1-74c2-4915-88d0-c1a2d9b8600d"),
                            RefTermId = new Guid("1bb955a3-5fef-428a-a763-97eadb9e46ac")
                        },
                        new
                        {
                            Id = new Guid("633a4b3b-eefd-4d8c-9d32-47d3511ad89e"),
                            RefSetId = new Guid("a929dfdc-207b-4578-85e9-20edf77e353f"),
                            RefTermId = new Guid("ad0cfe12-3b16-47ae-b9e2-c534bc57686d")
                        },
                        new
                        {
                            Id = new Guid("ecdac221-1e9b-4a96-bf61-b1503ceb87eb"),
                            RefSetId = new Guid("a929dfdc-207b-4578-85e9-20edf77e353f"),
                            RefTermId = new Guid("1bb955a3-5fef-428a-a763-97eadb9e46ac")
                        },
                        new
                        {
                            Id = new Guid("789bf1c7-7e43-4f8b-bf2e-a3dd2397794b"),
                            RefSetId = new Guid("a929dfdc-207b-4578-85e9-20edf77e353f"),
                            RefTermId = new Guid("aabe0ac9-35e4-45af-ab6f-48bcbe16eba1")
                        },
                        new
                        {
                            Id = new Guid("4fbd7121-54fa-4912-b977-6637867938a4"),
                            RefSetId = new Guid("f3adda1e-ee6b-41f8-9b26-d23d135b6893"),
                            RefTermId = new Guid("ad0cfe12-3b16-47ae-b9e2-c534bc57686d")
                        },
                        new
                        {
                            Id = new Guid("5e1d7a3b-4688-4f8d-8512-4878f214304f"),
                            RefSetId = new Guid("f3adda1e-ee6b-41f8-9b26-d23d135b6893"),
                            RefTermId = new Guid("1bb955a3-5fef-428a-a763-97eadb9e46ac")
                        });
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Entities.Models.Address", b =>
                {
                    b.HasOne("Entities.Models.RefTerm", "RefTerm")
                        .WithMany()
                        .HasForeignKey("RefTermId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", "User")
                        .WithMany("Addresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RefTerm");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.Email", b =>
                {
                    b.HasOne("Entities.Models.RefTerm", "RefTerm")
                        .WithMany()
                        .HasForeignKey("RefTermId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", "User")
                        .WithMany("Emails")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RefTerm");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.Phone", b =>
                {
                    b.HasOne("Entities.Models.RefTerm", "RefTerm")
                        .WithMany()
                        .HasForeignKey("RefTermId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", "User")
                        .WithMany("Phones")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RefTerm");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Models.SetRefTerm", b =>
                {
                    b.HasOne("Entities.Models.RefSet", "RefSet")
                        .WithMany()
                        .HasForeignKey("RefSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.RefTerm", "RefTerm")
                        .WithMany()
                        .HasForeignKey("RefTermId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RefSet");

                    b.Navigation("RefTerm");
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Emails");

                    b.Navigation("Phones");
                });
#pragma warning restore 612, 618
        }
    }
}
